/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: MEK
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "CLC Scheduler Main"
// #HINT ""
#DEFINE_CONSTANT  ciGLOBALACTIONS 50
#DEFINE_CONSTANT  ciSCENES      10
#DEFINE_CONSTANT  ciMAXEVENTS   50
#DEFINE_CONSTANT  ciACTIONCOUNT 50
#DEFINE_CONSTANT  ciMAXSPACES   250
// #CATEGORY "" 
#CATEGORY "13" // Timers
// #PRINT_TO_TRACE
#DIGITAL_EXPAND OutputsWithParams
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   Use only one instance of this module in any program.

   Config will automatically be loaded at startup if ConfigLoad is high when initial startup is complete.
   If you wish to manually trigger the registration of spaces, trigger load config last.  Once the config
   is loaded no more space registrations are permitted.

   Enter latitude and longitude in decimal format.  South and West are negative.

   Schedule file is written to "\NVRAM\AppNumber\Clc_Scheduler\Schedule.json", base directory may be modified
#HELP_END
/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "ClcScheduler"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT   Enable,
                Disable,
				        EnableToggle,
                _skip_,
                ConfigLoad,
                ConfigSave;
                
// ANALOG_INPUT 
STRING_INPUT  LatitudeOverride[15],
              LongitudeOverride[15];
// BUFFER_INPUT 

DIGITAL_OUTPUT  Enabled,
                _skip_,
                _skip_,
			        	_skip_,
                ConfigLoaded_F,
                ConfigSaved_F,
                _skip_,
                _skip_,
                GlobalAction[ciGLOBALACTIONS];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/


/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER  Latitude[15],
                  Longitude[15],
                  StorageBaseDirectory[50],
                  _skip_,
                  _skip_,
                  _skip_,
				          _skip_,
                  _skip_,
                  GlobalActionName[ciGLOBALACTIONS][50];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES StorageBaseDirectory
	propDefaultValue = "\\NVRAM";
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
string  Lat[15],
        Lon[15];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
eventhandler HandleEnabledChg(Config Sender, EventArgs Args) { Enabled = CentralScheduler.Config.EnabledSplus; }

eventhandler HandleConfigLoaded(CentralScheduler Sender, EventArgs Args) {
  Config Cfg;
  CentralScheduler.Config.LatitudeStr = Lat;
  CentralScheduler.Config.LongitudeStr = Lon;
  Cfg = CentralScheduler.Config;  //Work around for S+ issue accessing field directly to register events
  RegisterEvent(Cfg, OnEnabledChange, HandleEnabledChg);
  Enabled = CentralScheduler.Config.EnabledSplus;
  ConfigLoaded_F = 1;
}

eventhandler HandleConfigSaved(CentralScheduler Sender, EventArgs Args) {
  pulse(100, ConfigSaved_F);
}

eventhandler HandleGlobalActionChg(GlobalActionHelper Sender, GlobalActionEventArgs Args) {
  integer i, ActionId;
  for (i = 0 TO Args.ActionsCount - 1) {
    ActionId = Args.Actions[i];
    if (IsSignalDefined(GlobalAction[ActionId]))
      pulse(1, GlobalAction[ActionId]);
  }
}

function LoadConfig() {
  CentralScheduler.LoadConfig();
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Enable { CentralScheduler.Config.EnabledSplus = 1; }
PUSH Disable { CentralScheduler.Config.EnabledSplus = 0; }
PUSH EnableToggle { CentralScheduler.Config.EnabledSplus = !CentralScheduler.Config.EnabledSplus; }
PUSH ConfigLoad { LoadConfig(); } 
PUSH ConfigSave { CentralScheduler.SaveConfig(); }
CHANGE LatitudeOverride { Lat = LatitudeOverride; }
CHANGE LongitudeOverride { Lon = LongitudeOverride; }

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    integer i;
    GlobalActionHelper Helper;
	CentralScheduler.SetStorageBaseDirectory(StorageBaseDirectory);
	Helper = CentralScheduler.GlobalActionHelper;
    Lat = Latitude;
    Lon = Longitude;
    RegisterEvent(CentralScheduler, OnConfigLoaded, HandleConfigLoaded);
    RegisterEvent(CentralScheduler, OnConfigSaved, HandleConfigSaved);
    RegisterEvent(Helper, OnGlobalAction, HandleGlobalActionChg);
    for (i = 1 TO ciGLOBALACTIONS)
      if (IsSignalDefined(GlobalAction[i]))
        CentralScheduler.RegisterGlobalAction(i, GlobalActionName[i]);
    WaitForInitializationComplete();
    delay(2000);  //20seconds
	if (ConfigLoad)
	    LoadConfig();
}
