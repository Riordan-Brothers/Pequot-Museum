/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: MEK
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "CLC Scheduler Space"
// #HINT ""
#DEFINE_CONSTANT ciLOCALACTIONS 50
#DEFINE_CONSTANT ciSCENES       10
#DEFINE_CONSTANT  ciMAXEVENTS   50
#DEFINE_CONSTANT  ciACTIONCOUNT 50
#DEFINE_CONSTANT  ciMAXSPACES   250
// #CATEGORY "" 
#CATEGORY "13" // Timers
// #PRINT_TO_TRACE
#DIGITAL_EXPAND OutputsWithParams
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   Provides a space control interface for the CLC Scheduler
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "ClcScheduler"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT   RegisterSpace,
				SupportsKeypadActions,
                SupportsOccupancyActions,
                SupportsPhotocellActions;
string_input    SpaceID_Override[50],
				SpaceName_Override[100],
				SceneName0_Override[50],
                SceneName_Override[ciSCENES][50];

DIGITAL_OUTPUT  Keypad_Enable,
                Keypad_Disable,
                _skip_,
                Occupancy_SetOccupancy,
                Occupancy_SetVacancy,
                Occupancy_SetDisabled,
                _skip_,
                Photocell_Enable,
                Photocell_Disable,
                _skip_,
                _skip_,
                _skip_,
                _skip_,
                _skip_,
                _skip_,
                LocalAction[ciLOCALACTIONS];
ANALOG_OUTPUT   RecallScene#;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER   SpaceID[50];
STRING_PARAMETER    SpaceName[50],
                    _skip_,
                    SceneName0[50],
                    SceneName[ciSCENES][50],
                    _skip_,
                    LocalActionName[ciLOCALACTIONS][50];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
Space Sp;
string	_SpaceId[50],
		_SpaceName[100];
integer Started;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
eventhandler HandleSpaceAction(Space Sender, SpaceActionEventArgs Args) {
    integer DiscreteActionCount, i, DiscreteAction;
    if (SupportsKeypadActions) {
        if (Args.Actions.KeypadAction = eSpaceKeypadAction.Enable)
            pulse(1, Keypad_Enable);
        if (Args.Actions.KeypadAction = eSpaceKeypadAction.Disable)
            pulse(1, Keypad_Disable);
    }
    if (SupportsOccupancyActions) {
        if (Args.Actions.OccupancyAction = eSpaceOccupancyAction.Occupancy)
            pulse(1, Occupancy_SetOccupancy);
        if (Args.Actions.OccupancyAction = eSpaceOccupancyAction.Vacancy)
            pulse(1, Occupancy_SetVacancy);
        if (Args.Actions.OccupancyAction = eSpaceOccupancyAction.Disable)
            pulse(1, Occupancy_SetDisabled);
    }
    if (SupportsPhotocellActions) {
        if (Args.Actions.PhotocellAction = eSpacePhotocellAction.Enable)
            pulse(1, Photocell_Enable);
        if (Args.Actions.PhotocellAction = eSpacePhotocellAction.Disable)
            pulse(1, Photocell_Disable);
    }
    if (Args.Actions.RecallScene >= 0)
        RecallScene# = Args.Actions.RecallScene;
    DiscreteActionCount = Args.Actions.DiscreteActionsCount;
    if (DiscreteActionCount > 0) {
        for (i = 0 to DiscreteActionCount - 1) {
            DiscreteAction = Args.Actions.DiscreteActions[i];
            if (DiscreteAction > 0)
                if (IsSignalDefined(LocalAction[DiscreteAction]))
                    pulse(1, LocalAction[DiscreteAction]);
        }
    }
}

function Register() {
	Sp.Register(_SpaceId, _SpaceName);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH RegisterSpace { if (Started) Register(); }
CHANGE SpaceID_Override { 
	_SpaceId = SpaceID_Override;
}
CHANGE SpaceName_Override {
	_SpaceName =  SpaceName_Override;
}
CHANGE SceneName0_Override { Sp.RegisterSceneName(0, SceneName0); }
CHANGE SceneName_Override {
    integer i;
    i = GetLastModifiedArrayIndex();
    Sp.RegisterSceneName(i, SceneName_Override[i]);
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    integer i;
    RegisterEvent(Sp, OnSpaceAction, HandleSpaceAction);
    Sp.RegisterSceneName(0, SceneName0);
    for (i = 1 to ciSCENES)
        Sp.RegisterSceneName(i, SceneName[i]);
    Sp.UpdateSupportedActions(SupportsKeypadActions, SupportsOccupancyActions, SupportsPhotocellActions);
    for (i = 1 to ciLOCALACTIONS)
        if (IsSignalDefined(LocalAction[i]))
            Sp.RegisterDiscreteAction(i, LocalActionName[i]);
    WaitForInitializationComplete();
	if (!IsSignalDefined(SpaceID_Override) && !IsSignalDefined(SpaceName_Override) && RegisterSpace) {
		_SpaceID = SpaceID;
		_SpaceName = SpaceName;		
		Register();
	}
	Started = 1;
}
