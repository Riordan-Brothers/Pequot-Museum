/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: MEK
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "CLC Scheduler Editor"
// #HINT ""
#DEFINE_CONSTANT  ciSCENES      10
#DEFINE_CONSTANT  ciMAXEVENTS   50
#DEFINE_CONSTANT  ciACTIONCOUNT 50
#DEFINE_CONSTANT  ciMAXSPACES   250
// #CATEGORY "" 
#CATEGORY "13" // Timers
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "ClcScheduler"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT   NewEvent,
                DeleteSelectedEvent,
                EditSpaceActions,
                TestEvent,
                _skip_,
                SuspendResume,
                Save,
                Revert,
                _skip_,
                Reference_AM,
                Reference_PM,
                Reference_Sunrise,
                Reference_Sunset,
                _skip_,
                HourUp,
                HourDown,
                MinuteUp,
                MinuteDown,
                _skip_,
                Days_Sunday,
                Days_Monday,
                Days_Tuesday,
                Days_Wednesday,
                Days_Thursday,
                Days_Friday,
                Days_Saturday,
                _skip_,
                SelectedSpace_Exclude,
                SelectedSpace_Keypad_Enable,
                SelectedSpace_Keypad_Disable,
                SelectedSpace_Keypad_NoChange,
                _skip_,
                SelectedSpace_OccupancyMode_Occupancy,
                SelectedSpace_OccupancyMode_Vacancy,
                SelectedSpace_OccupancyMode_Disable,
                SelectedSpace_OccupancyMode_NoChange,
                _skip_,
                SelectedSpace_Photocell_Enable,
                SelectedSpace_Photocell_Disable,
                SelectedSpace_Photocell_NoChange,
                _skip_,
                SelectedSpace_LocalAction_Toggle[ciACTIONCOUNT],
                _skip_,
                GlobalAction_Toggle[ciACTIONCOUNT];
ANALOG_INPUT    SelectEvent,
                _skip_,
                SelectSpace,
                _skip_,
                SelectedSpace_RecallScene;  
STRING_INPUT    EventLabel[255];

DIGITAL_OUTPUT  _skip_,
                _skip_,
                _skip_,
                _skip_,
                _skip_,
                Suspended_F,
                _skip_,
                _skip_,
                _skip_,
                Reference_AM_F,
                Reference_PM_F,
                Reference_Sunrise_F,
                Reference_Sunset_F,
                _skip_,
                _skip_,
                _skip_,
                _skip_,
                _skip_,
                _skip_,
                Days_Sunday_F,
                Days_Monday_F,
                Days_Tuesday_F,
                Days_Wednesday_F,
                Days_Thursday_F,
                Days_Friday_F,
                Days_Saturday_F,
                _skip_,
                _skip_,
                SelectedSpace_Keypad_Enable_F,
                SelectedSpace_Keypad_Disable_F,
                SelectedSpace_Keypad_NoChange_F,
                _skip_,
                SelectedSpace_OccupancyMode_Occupancy_F,
                SelectedSpace_OccupancyMode_Vacancy_F,
                SelectedSpace_OccupancyMode_Disable_F,
                SelectedSpace_OccupancyMode_NoChange_F,
                _skip_,
                SelectedSpace_Photocell_Enable_F,
                SelectedSpace_Photocell_Disable_F,
                SelectedSpace_Photocell_NoChange_F,
                _skip_,
                SelectedSpace_LocalAction_F[ciACTIONCOUNT],
                _skip_,
                GlobalAction_F[ciACTIONCOUNT],
                _skip_,
                SpaceActionsEnabled_F[ciMAXSPACES];

ANALOG_OUTPUT   SelectedEvent_F,
                TotalEvents_F,
			    SelectedSpace_F,
                TotalSpaces_F,
                SelectedSpace_RecallScene_F,
                TotalGlobalActions_F,
                TotalSelectedSpaceActions_F;
STRING_OUTPUT   EventLabel_F,
                EventTime_F,
				SelectedSpaceID_F,
                SelectedSpaceName_F,
                SelectedSpaceSceneName0,
                SelectedSpaceSceneName[ciSCENES],
                SelectedSpaceLocalActionName[ciACTIONCOUNT],
                GlobalActionName[ciACTIONCOUNT],
                EventLabels_F[ciMAXEVENTS],
                SpaceNames[ciMAXSPACES];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/


/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
ScheduleEditor Editor;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
function RefreshEventList() {
  integer i;
  ScheduledEvent _Event;
  SelectedEvent_F = 0;
  for (i = 1 TO Min(Editor.EventsCount, ciMAXEVENTS)) {
    _Event = Editor.Events[(i-1)];
    EventLabels_F[i] = _Event.Name;
    if (Editor.IsCurrentEvent(_Event))
      SelectedEvent_F = i;
  }
  TotalEvents_F = i - 1;
}

function RefreshEventSelected() {
  integer i;
  ScheduledEvent _Event;
  SelectedEvent_F = 0;
  for (i = 1 TO Min(Editor.EventsCount, ciMAXEVENTS)) {
    _Event = Editor.Events[(i-1)];
    if (Editor.IsCurrentEvent(_Event))
      SelectedEvent_F = i;
  }
}

function RefreshEventDetails() {
  if (!IsNull(Editor.CurrentEvent)) {
    EventLabel_F = Editor.CurrentEvent.EditName;
    EventTime_F = Editor.CurrentEvent.EventTimeStr;
    Suspended_F = !Editor.CurrentEvent.EditActiveSplus;
    Reference_AM_F = Editor.CurrentEvent.EditEventTimeReference = eEventTimeReference.AM;
    Reference_PM_F = Editor.CurrentEvent.EditEventTimeReference = eEventTimeReference.PM;
    Reference_Sunrise_F = Editor.CurrentEvent.EditEventTimeReference = eEventTimeReference.Sunrise;
    Reference_Sunset_F = Editor.CurrentEvent.EditEventTimeReference = eEventTimeReference.Sunset;
    Days_Sunday_F = Editor.CurrentEvent.IsRecurrenceSet(ScheduledEvent.Sunday);
    Days_Monday_F = Editor.CurrentEvent.IsRecurrenceSet(ScheduledEvent.Monday);
    Days_Tuesday_F = Editor.CurrentEvent.IsRecurrenceSet(ScheduledEvent.Tuesday);
    Days_Wednesday_F = Editor.CurrentEvent.IsRecurrenceSet(ScheduledEvent.Wednesday);
    Days_Thursday_F = Editor.CurrentEvent.IsRecurrenceSet(ScheduledEvent.Thursday);
    Days_Friday_F = Editor.CurrentEvent.IsRecurrenceSet(ScheduledEvent.Friday);
    Days_Saturday_F = Editor.CurrentEvent.IsRecurrenceSet(ScheduledEvent.Saturday);
  } else {
    EventLabel_F = "";
    EventTime_F = "";
    Suspended_F = 0;
    Reference_AM_F = 0;
    Reference_PM_F = 0;
    Reference_Sunrise_F = 0;
    Reference_Sunset_F = 0;
    Days_Sunday_F = 0;
    Days_Monday_F = 0;
    Days_Tuesday_F = 0;
    Days_Wednesday_F = 0;
    Days_Thursday_F = 0;
    Days_Friday_F = 0;
    Days_Saturday_F = 0;
  }
}

function RefreshSpaceActionDetails() {
  integer i;
  if (!IsNull(Editor.CurrentSpaceActions)) {
    SelectedSpace_Keypad_Enable_F = Editor.CurrentSpaceActions.KeypadAction = eSpaceKeypadAction.Enable;
    SelectedSpace_Keypad_Disable_F = Editor.CurrentSpaceActions.KeypadAction = eSpaceKeypadAction.Disable;
    SelectedSpace_Keypad_NoChange_F = Editor.CurrentSpaceActions.KeypadAction = eSpaceKeypadAction.NoChange;
    SelectedSpace_OccupancyMode_Occupancy_F = Editor.CurrentSpaceActions.OccupancyAction = eSpaceOccupancyAction.Occupancy;
    SelectedSpace_OccupancyMode_Vacancy_F = Editor.CurrentSpaceActions.OccupancyAction = eSpaceOccupancyAction.Vacancy;
    SelectedSpace_OccupancyMode_Disable_F = Editor.CurrentSpaceActions.OccupancyAction = eSpaceOccupancyAction.Disable;
    SelectedSpace_OccupancyMode_NoChange_F = Editor.CurrentSpaceActions.OccupancyAction = eSpaceOccupancyAction.NoChange;
    SelectedSpace_Photocell_Enable_F = Editor.CurrentSpaceActions.PhotocellAction = eSpacePhotocellAction.Enable;
    SelectedSpace_Photocell_Disable_F = Editor.CurrentSpaceActions.PhotocellAction = eSpacePhotocellAction.Disable;
    SelectedSpace_Photocell_NoChange_F = Editor.CurrentSpaceActions.PhotocellAction = eSpacePhotocellAction.NoChange;
    SelectedSpace_RecallScene_F = Editor.CurrentSpaceActions.RecallScene;
    for (i=1 TO ciACTIONCOUNT)
      if (IsSignalDefined(SelectedSpace_LocalAction_F[i]))
        SelectedSpace_LocalAction_F[i] = Editor.CurrentSpaceActions.IsLocalActionActive(i);
  } else {
    SelectedSpace_Keypad_Enable_F = 0;
    SelectedSpace_Keypad_Disable_F = 0;
    SelectedSpace_Keypad_NoChange_F = 1;
    SelectedSpace_OccupancyMode_Occupancy_F = 0;
    SelectedSpace_OccupancyMode_Vacancy_F = 0;
    SelectedSpace_OccupancyMode_Disable_F = 0;
    SelectedSpace_OccupancyMode_NoChange_F = 1;
    SelectedSpace_Photocell_Enable_F = 0;
    SelectedSpace_Photocell_Disable_F = 0;
    SelectedSpace_Photocell_NoChange_F = 1;
    SelectedSpace_RecallScene_F = -1;
    for (i=1 TO ciACTIONCOUNT)
      if (IsSignalDefined(SelectedSpace_LocalAction_F[i]))
        SelectedSpace_LocalAction_F[i] = 0;
  }
}

function RefreshSpaceActionBaseData() {
  integer i;
  Space Sp;
  if (!IsNull(Editor.CurrentSpaceActions)) {
    Editor.GetSpaceForCurrentSpaceActions(Sp);
    if (!IsNull(Sp)) {
      SelectedSpace_F = Editor.CurrentSpaceIndex;
	  SelectedSpaceID_F = Sp.Id;
      SelectedSpaceName_F = Sp.Name;
      SelectedSpaceSceneName0 = Sp.GetSceneName(0);
      for (i=1 TO ciSCENES)
        if (IsSignalDefined(SelectedSpaceSceneName[i]))
          SelectedSpaceSceneName[i] = Sp.GetSceneName(i);
      for (i=1 TO ciACTIONCOUNT)
        if (IsSignalDefined(SelectedSpaceLocalActionName[i]))
          SelectedSpaceLocalActionName[i] = Sp.GetActionName(i);
      TotalSelectedSpaceActions_F = Sp.GetActionCount();
      return;
    }
  }
  SelectedSpace_F = 0;
  SelectedSpaceName_F = "";
  SelectedSpaceSceneName0 = "";
  for (i=1 TO ciSCENES)
    if (IsSignalDefined(SelectedSpaceSceneName[i]))
      SelectedSpaceSceneName[i] = "";
  for (i=1 TO ciACTIONCOUNT)
    if (IsSignalDefined(SelectedSpaceLocalActionName[i]))
      SelectedSpaceLocalActionName[i] = "";
  TotalSelectedSpaceActions_F = 0;
}

function RefreshGlobalActions() {
  integer i;
  for (i=1 TO Min(CentralScheduler.GlobalActionCount, ciACTIONCOUNT))
    GlobalActionName[i] = CentralScheduler.GetGlobalAction(i);
  TotalGlobalActions_F = Min(CentralScheduler.GlobalActionCount, ciACTIONCOUNT);
}

function RefreshGlobalActionSelected() {
  integer i;
  if (IsNull(Editor.CurrentEvent))
    return;
  for (i=1 TO Min(CentralScheduler.GlobalActionCount, ciACTIONCOUNT))
    GlobalAction_F[i] = Editor.CurrentEvent.IsGlobalActionSet(i);
}

function RefreshSpaceList() {
  integer i;
  Space Sp;
  for (i=1 TO Min(CentralScheduler.SpaceCount, ciMAXSPACES)) {
      SpaceNames[i] = CentralScheduler.GetSpaceName(CentralScheduler.GetSpaceIdForIndex(i-1));
  }
  TotalSpaces_F = Min(CentralScheduler.SpaceCount, ciACTIONCOUNT);
}

function RefreshSpaceActionsSelected() {
  integer i;
  if (IsNull(Editor.CurrentEvent))
    return;
  for (i=1 TO Min(CentralScheduler.SpaceCount, ciMAXSPACES)) {
      SpaceActionsEnabled_F[i] = Editor.CurrentEvent.IsSpaceActionEnabled(CentralScheduler.GetSpaceIdForIndex(i-1));
  }
}

eventhandler HandleEventsListChange(ScheduleEditor Sender, EventArgs Args) {
  RefreshEventList();
}

eventhandler HandleEventSelect(ScheduleEditor Sender, EventArgs Args) {
  RefreshEventDetails();
  RefreshEventSelected();
  RefreshGlobalActionSelected();
}

eventhandler HandleEventPropertyChange(ScheduleEditor Sender, EventArgs Args) {
  RefreshEventDetails();
}

eventhandler HandleEventGlobalActionChange(ScheduleEditor Sender, EventArgs Args) {
  RefreshGlobalActionSelected();
}

eventhandler HandleEventSpaceActionChange(ScheduleEditor Sender, EventArgs Args) {
  RefreshSpaceActionDetails();
}

eventhandler HandleEventSpaceActionAssignmentChange(ScheduleEditor Sender, EventArgs Args) {
  RefreshSpaceActionBaseData();
  RefreshSpaceActionDetails();
  RefreshSpaceActionsSelected();
}

eventhandler HandleConfigLoadedEvent(CentralScheduler Sender, EventArgs Args) {
  RefreshGlobalActions();
  RefreshSpaceList();
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH NewEvent { Editor.CreateEvent(); }
PUSH DeleteSelectedEvent { Editor.DeleteCurrentEvent(); }
PUSH EditSpaceActions {
  RefreshSpaceActionBaseData();
  RefreshSpaceActionDetails();
  RefreshSpaceActionsSelected();
}
PUSH TestEvent { Editor.CurrentEvent.ExecuteEvent(); }
PUSH SuspendResume { Editor.CurrentEvent.ToggleEditActiveState(); }
PUSH Save { Editor.CurrentEvent.Save(); }
PUSH Revert { Editor.CurrentEvent.Cancel(); }
PUSH Reference_AM { eEventTimeReference Ref; Ref = eEventTimeReference.AM; Editor.CurrentEvent.SetTimeReference(Ref); }
PUSH Reference_PM { eEventTimeReference Ref; Ref = eEventTimeReference.PM; Editor.CurrentEvent.SetTimeReference(Ref); }
PUSH Reference_Sunrise { eEventTimeReference Ref; Ref = eEventTimeReference.Sunrise; Editor.CurrentEvent.SetTimeReference(Ref); }
PUSH Reference_Sunset { eEventTimeReference Ref; Ref = eEventTimeReference.Sunset; Editor.CurrentEvent.SetTimeReference(Ref); }
PUSH HourUp {
  do {
    Editor.CurrentEvent.EditTime(60);
    delay(20);
  } until (!HourUp);
}
PUSH HourDown {
  do {
    Editor.CurrentEvent.EditTime(-60);
    delay(20);
  } until (!HourDown);
}
PUSH MinuteUp {
  do {
    Editor.CurrentEvent.EditTime(1);
    delay(20);
  } until (!MinuteUp);
}
PUSH MinuteDown {
  do {
    Editor.CurrentEvent.EditTime(-1);
    delay(20);
  } until (!MinuteDown);
}
PUSH Days_Sunday { Editor.CurrentEvent.ToggleRecurrence(ScheduledEvent.Sunday); }
PUSH Days_Monday { Editor.CurrentEvent.ToggleRecurrence(ScheduledEvent.Monday); }
PUSH Days_Tuesday { Editor.CurrentEvent.ToggleRecurrence(ScheduledEvent.Tuesday); }
PUSH Days_Wednesday { Editor.CurrentEvent.ToggleRecurrence(ScheduledEvent.Wednesday); }
PUSH Days_Thursday { Editor.CurrentEvent.ToggleRecurrence(ScheduledEvent.Thursday); }
PUSH Days_Friday { Editor.CurrentEvent.ToggleRecurrence(ScheduledEvent.Friday); }
PUSH Days_Saturday { Editor.CurrentEvent.ToggleRecurrence(ScheduledEvent.Saturday); }
PUSH SelectedSpace_Exclude {
  Editor.CurrentEvent.RemoveSpaceAction(Editor.CurrentSpaceActions.SpaceId);
  RefreshSpaceActionBaseData();
  RefreshSpaceActionDetails();
  RefreshSpaceActionsSelected();
  SelectedSpace_F = 0;
}
PUSH SelectedSpace_Keypad_Enable { eSpaceKeypadAction Ref; Ref = eSpaceKeypadAction.Enable; Editor.CurrentSpaceActions.SetKeypadAction(Ref); }
PUSH SelectedSpace_Keypad_Disable  { eSpaceKeypadAction Ref; Ref = eSpaceKeypadAction.Disable; Editor.CurrentSpaceActions.SetKeypadAction(Ref); }
PUSH SelectedSpace_Keypad_NoChange { eSpaceKeypadAction Ref; Ref = eSpaceKeypadAction.NoChange; Editor.CurrentSpaceActions.SetKeypadAction(Ref); }
PUSH SelectedSpace_OccupancyMode_Occupancy { eSpaceOccupancyAction Ref; Ref = eSpaceOccupancyAction.Occupancy; Editor.CurrentSpaceActions.SetOccupancyAction(Ref); }
PUSH SelectedSpace_OccupancyMode_Vacancy { eSpaceOccupancyAction Ref; Ref = eSpaceOccupancyAction.Vacancy; Editor.CurrentSpaceActions.SetOccupancyAction(Ref); }
PUSH SelectedSpace_OccupancyMode_Disable { eSpaceOccupancyAction Ref; Ref = eSpaceOccupancyAction.Disable; Editor.CurrentSpaceActions.SetOccupancyAction(Ref); }
PUSH SelectedSpace_OccupancyMode_NoChange { eSpaceOccupancyAction Ref; Ref = eSpaceOccupancyAction.NoChange; Editor.CurrentSpaceActions.SetOccupancyAction(Ref); }
PUSH SelectedSpace_Photocell_Enable { eSpacePhotocellAction Ref; Ref = eSpacePhotocellAction.Enable; Editor.CurrentSpaceActions.SetPhotocellAction(Ref); }
PUSH SelectedSpace_Photocell_Disable { eSpacePhotocellAction Ref; Ref = eSpacePhotocellAction.Disable; Editor.CurrentSpaceActions.SetPhotocellAction(Ref); }
PUSH SelectedSpace_Photocell_NoChange { eSpacePhotocellAction Ref; Ref = eSpacePhotocellAction.NoChange; Editor.CurrentSpaceActions.SetPhotocellAction(Ref); }
PUSH SelectedSpace_LocalAction_Toggle  { Editor.CurrentSpaceActions.ToggleLocalAction(GetLastModifiedArrayIndex()); }
PUSH GlobalAction_Toggle { Editor.CurrentEvent.ToggleGlobalAction(GetLastModifiedArrayIndex()); }
CHANGE SelectEvent {
  integer EventIndex;
  EventIndex = Editor.SelectEvent(SelectEvent);
  SelectedSpace_F = 0;
}
CHANGE SelectSpace { Editor.SelectSpace(SelectSpace); }
CHANGE SelectedSpace_RecallScene { Editor.CurrentSpaceActions.SetSceneToRecall(SelectedSpace_RecallScene); }
CHANGE EventLabel { Editor.CurrentEvent.EditName = EventLabel; }

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
  RegisterEvent(Editor, OnEventsListChange, HandleEventsListChange);
  RegisterEvent(Editor, OnEventSelect, HandleEventSelect);
  RegisterEvent(Editor, OnEventPropertyChange, HandleEventPropertyChange);
  RegisterEvent(Editor, OnEventGlobalActionChange, HandleEventGlobalActionChange);
  RegisterEvent(Editor, OnEventSpaceActionChange, HandleEventSpaceActionChange);
  RegisterEvent(Editor, OnEventSpaceActionAssignmentChange, HandleEventSpaceActionAssignmentChange);
  WaitForInitializationComplete();
  RegisterEvent(CentralScheduler, OnConfigLoaded, HandleConfigLoadedEvent);
}
